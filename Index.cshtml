@model IEnumerable<MoodWave8.Models.Main>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<select id="filterByMood" onclick="moodFilter()" class="form-control" >
    <option value="">Filter by mood...</option>
    <option value="Happy">Happy</option>
    <option value="Angry">Angry</option>
    <option value="Chill">Chill</option>
    <option value="Energized">Energized</option>
    <option value="Neutral">Neutral</option>
    <option value="Sad">Sad</option>
    <option value="Romantic">Romantic</option>
</select>
<select id="filterByUsername" onclick="usernameFunction()" class="form-control">
    <option value="">Filter by username...</option>
    <option value="ariana">ariana</option>
    <option value="sabrinamason01">sabrinamason01</option>
    <option value="torbee">torbee</option>
</select>

<p>
    @Html.ActionLink("Create New", "Create")
</p>

<table class="table" id="MainTable">
    <tr>
        <th onclick="sortTable(0)">
            Track
        </th>
        <th onclick="sortTable(1)">
            Artist
        </th>
        <th onclick="sortTable(2)">
            Mood
        </th>
        <th onclick="sortTable(3)">
            Username
        </th>
        <th></th>
    </tr>

@foreach (var item in Model)
{
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Track)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Artist)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Mood)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.User.UserName)
        </td>
   
        <td>
            @Html.ActionLink("Edit", "Edit", new { id = item.index }) |
            @Html.ActionLink("Listen", "Details", new { id = item.index }) |
            @Html.ActionLink("Delete", "Delete", new { id = item.index })
        </td>
    </tr>
}

</table>

<script>
function sortTable(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById("MainTable");
  switching = true;
  //Set the sorting direction to ascending:
  dir = "asc";
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.getElementsByTagName("TR");
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i < (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName("TD")[n];
      y = rows[i + 1].getElementsByTagName("TD")[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == "asc") {
        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == "desc") {
        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;
    } else {
      /*If no switching has been done AND the direction is "asc",
      set the direction to "desc" and run the while loop again.*/
      if (switchcount == 0 && dir == "asc") {
        dir = "desc";
        switching = true;
      }
    }
  }
}
function moodFilter() {
  // Declare variables
  var input, filter, table, tr, td, i;
  input = document.getElementById("filterByMood");
  filter = input.value.toUpperCase();
  table = document.getElementById("MainTable");
  tr = table.getElementsByTagName("tr");

  // Loop through all table rows, and hide those who don't match the search query
  for (i = 0; i < tr.length; i++) {
    td = tr[i].getElementsByTagName("td")[2];
    if (td) {
      if (td.innerHTML.toUpperCase().indexOf(filter) > -1) {
        tr[i].style.display = "";
      } else {
        tr[i].style.display = "none";
      }
    }
  }
}
function usernameFilter() {
    // Declare variables
    var input, filter, table, tr, td, i;
    input = document.getElementById("filterByUsername");
    filter = input.value.toUpperCase();
    table = document.getElementById("MainTable");
    tr = table.getElementsByTagName("tr");

    // Loop through all table rows, and hide those who don't match the search query
    for (i = 0; i < tr.length; i++) {
        td = tr[i].getElementsByTagName("td")[3];
        if (td) {
            if (td.innerHTML.toUpperCase().indexOf(filter) > -1) {
                tr[i].style.display = "";
            } else {
                tr[i].style.display = "none";
            }
        }
    }
}
</script>
<style>
    #filterByMood, #filterByUsername{
        float: right;
    }
</style>